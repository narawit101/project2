const express = require("express");
const pool = require("../db");
require("dotenv").config();
const router = express.Router();
const { Resend } = require("resend");
const resend = new Resend(process.env.Resend_API);
const multer = require("multer");
const path = require("path");
const fs = require("fs");
const { error } = require("console");
const cron = require("node-cron");
const authMiddleware = require("../middlewares/auth");

const storage = multer.diskStorage({
  destination: function (req, file, cd) {
    let uploadDir = "";
    if (file.fieldname === "deposit_slip") {
      uploadDir = "uploads/images/slip/"; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå deposit_slip
    }
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true }); // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ
    }
    cd(null, uploadDir); // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
  },
  filename: function (req, file, cd) {
    cd(null, Date.now() + path.extname(file.originalname)); // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏ß‡∏¢ timestamp
  },
});

const upload = multer({
  storage: storage,
  limits: {
    files: 10,
    fileSize: 8 * 1024 * 1024,
  },
});

// ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ
cron.schedule("0,30 * * * *", async () => {
  const now = new Date();
  const todayStr = now.toISOString().split("T")[0]; // YYYY-MM-DD

  console.log("üî• CRON WORKING", now.toISOString());

  try {
    const result = await pool.query(
      `
      SELECT b.*, u.email, f.field_name
      FROM bookings b
      JOIN users u ON u.user_id = b.user_id
      JOIN field f ON f.field_id = b.field_id
      WHERE b.status = 'pending' AND b.start_date = $1
    `,
      [todayStr]
    );

    console.log(`üì¶ ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${result.rows.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);

    for (const booking of result.rows) {
      try {
        const rawTime = booking.start_time; // ‡πÄ‡∏ä‡πà‡∏ô 12:30:00
        const todayDate = todayStr; // ‡πÄ‡∏ä‡πà‡∏ô 2025-05-30
        const datetimeStr = `${todayDate}T${rawTime}+07:00`; // ‡∏Ñ‡∏£‡∏ö‡∏ä‡∏∏‡∏î‡πÄ‡∏ß‡∏•‡∏≤

        const startTime = new Date(datetimeStr); // ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≠‡∏á (‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ)
        const nowTime = new Date(
          `${todayDate}T${now.toTimeString().split(" ")[0]}+07:00`
        ); // ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

        if (isNaN(startTime.getTime())) {
          console.warn(
            `‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏° booking ${booking.booking_id} ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ startTime invalid`
          );
          continue;
        }

        const diffMinutes = (startTime - nowTime) / (1000 * 60);

        console.log(`üîç ‡∏ï‡∏£‡∏ß‡∏à booking: ${booking.booking_id}`);
        console.log(`üïí startTime: ${startTime.toISOString()}`);
        console.log(`üïí nowTime:   ${nowTime.toISOString()}`);
        console.log(`üßÆ diff:      ${diffMinutes.toFixed(2)} ‡∏ô‡∏≤‡∏ó‡∏µ`);

        if (diffMinutes >= 29 && diffMinutes <= 31) {
          await resend.emails.send({
            from: process.env.Sender_Email,
            to: "surachai.up@rmuti.ac.th",
            subject: "‚è∞ ‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß!",
            html: `
              <p>‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏° <strong>${booking.field_name}</strong></p>
              <p>‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤ <strong>${booking.start_time}</strong> ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà <strong>${todayDate}</strong></p>
              <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤ </p>
            `,
          });

          console.log(`üìß ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${booking.email}`);
        } else if (diffMinutes == 0) {
          await resend.emails.send({
            from: process.env.Sender_Email,
            to: "surachai.up@rmuti.ac.th",
            subject: "‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß!",
            html: `
              <p>‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏° <strong>${booking.field_name}</strong></p>
              <p>‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤ <strong>${booking.start_time}</strong> ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà <strong>${booking.start_date}</strong></p>
              <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏µ‡∏ö‡∏°‡∏≤ </p>
            `,
          });
        } else {
          console.log(
            `‚è≥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${diffMinutes.toFixed(2)} ‡∏ô‡∏≤‡∏ó‡∏µ)`
          );
        }
      } catch (error) {
        console.warn(
          `‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏° booking ${booking.booking_id} ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ error:`,
          error.message
        );
      }
    }
  } catch (err) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô CRON:", err);
  }
});

router.post(
  "/",
  authMiddleware,
  upload.fields([{ name: "deposit_slip" }]),
  async (req, res) => {
    let depositSlip = null;
    const client = await pool.connect();

    try {
      const {
        fieldId,
        userId,
        subFieldId,
        bookingDate,
        startTime,
        startDate,
        endTime,
        endDate,
        totalHours,
        totalPrice,
        selectedSlots,
        payMethod,
        totalRemaining,
        activity,
        selectedFacilities,
        status,
      } = JSON.parse(req.body.data);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡∏ö ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î error)
      if (req.files["deposit_slip"]?.length > 0) {
        depositSlip = req.files["deposit_slip"][0].path;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
      if (
        !fieldId ||
        !userId ||
        !subFieldId ||
        !bookingDate ||
        !startTime ||
        !endTime ||
        !totalHours ||
        !totalPrice ||
        !payMethod ||
        !selectedSlots ||
        totalRemaining === undefined ||
        !activity
      ) {
        if (depositSlip && fs.existsSync(depositSlip))
          fs.unlinkSync(depositSlip);
        return res
          .status(400)
          .json({ success: false, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö" });
      }

      if (!startDate || !endDate) {
        return res
          .status(400)
          .json({ success: false, message: "Invalid startDate or endDate" });
      }

      await client.query("BEGIN");
      const overlapResult = await client.query(
        `SELECT * FROM bookings
        WHERE sub_field_id = $1
          AND (
            (start_date || ' ' || start_time)::timestamp < $3::timestamp
            AND (end_date || ' ' || end_time)::timestamp > $2::timestamp
          )`,
        [subFieldId, `${startDate} ${startTime}`, `${endDate} ${endTime}`]
      );

      if (overlapResult.rows.length > 0) {
        if (depositSlip && fs.existsSync(depositSlip)) {
          fs.unlinkSync(depositSlip); // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà upload ‡πÅ‡∏•‡πâ‡∏ß
        }
        return res.status(400).json({
          success: false,
          message: "‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà",
        });
      }

      // Insert bookings
      const bookingResult = await client.query(
        `INSERT INTO bookings (field_id, user_id, sub_field_id, booking_date, start_time, end_time, total_hours, total_price, pay_method, total_remaining, activity, status, start_date, end_date, selected_slots)
   VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15) RETURNING booking_id`,
        [
          fieldId,
          userId,
          subFieldId,
          bookingDate,
          startTime,
          endTime,
          totalHours,
          totalPrice,
          payMethod,
          totalRemaining,
          activity,
          status,
          startDate,
          endDate,
          selectedSlots,
        ]
      );

      const bookingId = bookingResult.rows[0].booking_id;

      // insert facility
      for (const facility of selectedFacilities) {
        await client.query(
          `INSERT INTO booking_fac (booking_id, field_fac_id, fac_name) 
         VALUES ($1, $2, $3) `,
          [bookingId, facility.field_fac_id, facility.fac_name]
        );
      }

      // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö payment
      if (depositSlip) {
        const paymentResult = await client.query(
          `INSERT INTO payment (booking_id, deposit_slip) VALUES ($1, $2) RETURNING payment_id`,
          [bookingId, depositSlip]
        );
      }

      await client.query("COMMIT");
      console.log("üîî emitting slot_booked", bookingId);
      if (req.io) {
        req.io.emit("slot_booked", {
          bookingId,
        });
      }

      console.log("Booking saved successfully");
      res
        .status(200)
        .json({ success: true, message: "Booking saved successfully" });
    } catch (error) {
      await client.query("ROLLBACK");
      if (depositSlip && fs.existsSync(depositSlip)) {
        fs.unlinkSync(depositSlip);
      }
      console.error("Error saving booking:", error);
      res
        .status(500)
        .json({ success: false, message: error.message || "Unexpected error" });
    } finally {
      client.release();
    }
  }
);

router.get(
  "/booked-block/:subFieldId/:startDate/:endDate",
  authMiddleware,
  async (req, res) => {
    const { subFieldId, startDate, endDate } = req.params;

    try {
      const client = await pool.connect();
      const result = await client.query(
        `SELECT *
       FROM bookings
       where booking_date = $2   and sub_field_id = $1 
         AND status IN ('pending', 'approved')
      `,
        [subFieldId, startDate]
      );

      client.release();

      res.status(200).json({
        success: true,
        data: result.rows,
      });
    } catch (error) {
      console.error("Error fetching booked range:", error);
      res.status(500).json({ success: false, error: "Database error" });
    }
  }
);

router.get("/my-bookings/:user_id", authMiddleware, async (req, res) => {
  const { user_id } = req.params;
  const { date, status } = req.query;

  let query = `
    SELECT 
      b.booking_id,
      b.user_id,
      b.field_id,
      u.first_name,
      u.last_name,
      u.email,
      f.field_name,
      f.gps_location,
      f.price_deposit,
      f.cancel_hours,
      b.sub_field_id,
      sf.sub_field_name,
      sf.price,
      b.booking_date,
      b.start_date,
      b.start_time,
      b.end_date,
      b.end_time,
      b.total_hours,
      b.total_price,
      b.total_remaining,
      b.pay_method,
      b.status,
      b.activity,
      b.selected_slots,
      bf.fac_name AS facility_name,
      bf.field_fac_id
    FROM bookings b
    LEFT JOIN field f ON b.field_id = f.field_id
    LEFT JOIN sub_field sf ON b.sub_field_id = sf.sub_field_id
    LEFT JOIN booking_fac bf ON bf.booking_id = b.booking_id
    INNER JOIN users u ON u.user_id = b.user_id
    WHERE b.user_id = $1
  `;

  let values = [user_id];
  let i = 2;

  if (date) {
    query += ` AND b.start_date = $${i}`;
    values.push(date);
    i++;
  }

  if (status) {
    query += ` AND b.status = $${i}`;
    values.push(status);
    i++;
  }

  query += ` ORDER BY b.booking_date DESC`;

  try {
    const result = await pool.query(query, values);

    res.status(200).json({
      success: true,
      data: result.rows,
    });
  } catch (error) {
    console.error("Error fetching bookings:", error);
    res.status(500).json({
      success: false,
      error: "Not Found Your booking",
    });
  }
});

router.get("/my-orders/:field_id", authMiddleware, async (req, res) => {
  const { field_id } = req.params;
  const { date, status } = req.query;
  const user_id = req.user.user_id;
  const user_role = req.user.role; // ‡πÄ‡∏ä‡πà‡∏ô 'user', 'admin'

  try {
    // 1. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà admin ‚Üí ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°
    if (user_role !== "admin") {
      const fieldCheck = await pool.query(
        `SELECT user_id FROM field WHERE field_id = $1`,
        [field_id]
      );

      if (fieldCheck.rowCount === 0) {
        return res
          .status(404)
          .json({ success: false, error: "Field not found" });
      }

      const fieldOwnerId = fieldCheck.rows[0].user_id;

      if (fieldOwnerId !== user_id) {
        return res.status(403).json({ success: false, error: "Access denied" });
      }
    }

    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á query ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö booking (‡∏ï‡∏≤‡∏° date, status ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤)
    let query = `
      SELECT 
        b.booking_id, b.user_id, b.field_id,
        u.first_name, u.last_name, u.email,
        f.field_name, f.gps_location, f.price_deposit, f.cancel_hours,
        b.sub_field_id, sf.sub_field_name, sf.price,
        b.booking_date, b.start_date, b.start_time, b.end_date, b.end_time,
        b.total_hours, b.total_price, b.total_remaining,
        b.pay_method, b.status, b.activity, b.selected_slots
      FROM bookings b
      LEFT JOIN field f ON b.field_id = f.field_id
      LEFT JOIN sub_field sf ON b.sub_field_id = sf.sub_field_id
      INNER JOIN users u ON u.user_id = b.user_id
      WHERE b.field_id = $1
    `;

    let values = [field_id];
    let i = 2;

    if (date) {
      query += ` AND b.start_date = $${i}`;
      values.push(date);
      i++;
    }

    if (status) {
      query += ` AND b.status = $${i}`;
      values.push(status);
      i++;
    }

    query += ` ORDER BY b.booking_date DESC`;

    const result = await pool.query(query, values);
    res.status(200).json({ success: true, data: result.rows });
  } catch (error) {
    console.error("Error fetching bookings:", error);
    res.status(500).json({ success: false, error: "Failed to get bookings" });
  }
});

router.get("/bookings-detail/:booking_id", authMiddleware, async (req, res) => {
  const { booking_id } = req.params;
  const requestingUser = req.user;

  try {
    const result = await pool.query(
      `SELECT 
          b.booking_id,
          b.user_id,
          b.field_id,
          u.first_name,
          u.last_name,
          u.email,
          f.field_name,
          f.gps_location,
          f.price_deposit,
          f.cancel_hours,
          b.sub_field_id,
          sf.sub_field_name,
          sf.price,
          b.booking_date,
          b.start_date,
          b.start_time,
          b.end_date,
          b.end_time,
          b.total_hours,
          b.total_price,
          b.total_remaining,
          b.pay_method,
          b.status,
          b.activity,
          b.selected_slots,
          bf.fac_name AS facility_name,
          bf.field_fac_id,
          p.payment_id,
          p.deposit_slip,
          p.total_slip
        FROM bookings b
        LEFT JOIN field f ON b.field_id = f.field_id
        LEFT JOIN sub_field sf ON b.sub_field_id = sf.sub_field_id
        LEFT JOIN booking_fac bf ON bf.booking_id = b.booking_id
        LEFT JOIN users u ON u.user_id = b.user_id
        LEFT JOIN payment p ON p.booking_id = b.booking_id
        WHERE b.booking_id = $1
        LIMIT 1;`,
      [booking_id]
    );

    const booking = result.rows[0];

    if (!booking) {
      return res.status(404).json({
        success: false,
        error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ",
      });
    }

    const isAdmin = requestingUser.role === "admin";
    const isBookingOwner = requestingUser.user_id === booking.user_id;
    const isFieldOwner = requestingUser.user_id === booking.field_user_id;

    if (!isAdmin && !isBookingOwner && !isFieldOwner) {
      return res.status(403).json({
        success: false,
        error: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ",
      });
    }

    return res.status(200).json({ success: true, data: booking });
  } catch (error) {
    console.error("Error fetching booking detail:", error);
    return res.status(500).json({
      success: false,
      error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
    });
  }
});

router.put("/booking-status/:booking_id", authMiddleware, async (req, res) => {
  const { booking_id } = req.params;
  const { booking_status } = req.body;

  try {
    const result = await pool.query(
      "UPDATE bookings SET status = $1 WHERE booking_id = $2",
      [booking_status, booking_id]
    );

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÅ‡∏ñ‡∏ß‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (result.rowCount === 0) {
      return res.status(404).json({
        success: false,
        error: "‡πÑ‡∏°‡πà‡∏û‡∏ö booking ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï",
      });
    }

    return res.status(200).json({
      success: true,
      message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      data: result.rows,
    });
  } catch (error) {
    console.error("Error updating booking status:", error);
    return res.status(500).json({
      success: false,
      error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö",
    });
  }
});

router.delete(
  "/cancel-bookings/:booking_id",
  authMiddleware,
  async (req, res) => {
    const { booking_id } = req.params;
    const { cancel_time } = req.body;

    try {
      if (!cancel_time) {
        return res.status(400).json({
          status: 0,
          message: "Missing cancel_time in request body.",
        });
      }

      const now = new Date(cancel_time);
      if (isNaN(now.getTime())) {
        return res.status(400).json({
          status: 0,
          message: "Invalid cancel_time format. Must be ISO string.",
        });
      }

      console.log(`üìå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å booking_id = ${booking_id}`);
      console.log(`üïí ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° cancel: ${now.toISOString()}`);

      const fieldDataResult = await pool.query(
        `
        SELECT f.cancel_hours, b.start_date, b.start_time, f.field_name
        FROM bookings b
        JOIN field f ON b.field_id = f.field_id
        WHERE b.booking_id = $1
      `,
        [booking_id]
      );

      if (fieldDataResult.rowCount === 0) {
        return res.status(404).json({
          status: 0,
          message: `Booking ID ${booking_id} not found.`,
          timestamp: now.toISOString(),
        });
      }

      const { cancel_hours, start_date, start_time, field_name } =
        fieldDataResult.rows[0];

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á start_date
      let startDateStr;
      try {
        const startDateObj = new Date(start_date);
        if (isNaN(startDateObj.getTime())) throw new Error("Invalid start_date");
        startDateStr = startDateObj.toISOString().slice(0, 10);
      } catch (err) {
        console.error("‚ùå start_date is invalid:", start_date);
        return res.status(500).json({
          status: 0,
          message: "Invalid start_date format from database.",
          booking_id,
        });
      }

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö start_time format: HH:mm
      if (!start_time || typeof start_time !== "string" || !/^\d{2}:\d{2}$/.test(start_time)) {
        console.error("‚ùå Invalid start_time:", start_time);
        return res.status(500).json({
          status: 0,
          message: "Invalid start_time format from database.",
          booking_id,
        });
      }

      // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á startDateTime ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      const startDateTimeRaw = `${startDateStr}T${start_time}:00Z`;
      const startDateTime = new Date(startDateTimeRaw);
      if (isNaN(startDateTime.getTime())) {
        console.error("‚ùå Invalid startDateTime:", startDateTimeRaw);
        return res.status(500).json({
          status: 0,
          message: "Cannot parse combined start date/time.",
          booking_id,
        });
      }
      startDateTime.setHours(startDateTime.getHours() + 7); // ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢

      // ‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ñ‡πâ‡∏≤ cancel_hours = null
      if (cancel_hours === null) {
        await pool.query(`DELETE FROM booking_fac WHERE booking_id = $1`, [booking_id]);
        await pool.query(`DELETE FROM bookings WHERE booking_id = $1`, [booking_id]);

        return res.status(200).json({
          status: 1,
          message: `Booking for ${field_name} at ${start_time} on ${startDateStr} canceled successfully.`,
          cancelDeadline: null,
          now: now.toISOString(),
        });
      }

      // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏≤‡∏¢‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
      const cancelDeadline = new Date(
        startDateTime.getTime() - cancel_hours * 60 * 60 * 1000
      );

      console.log("Frontend ‡∏™‡πà‡∏á‡∏°‡∏≤ (cancel_time):", now.toISOString());
      console.log("‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°:", startDateTime.toISOString());
      console.log("‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏≤‡∏¢‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å:", cancelDeadline.toISOString());

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ó‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏´‡∏°
      if (now < cancelDeadline) {
        await pool.query(`DELETE FROM booking_fac WHERE booking_id = $1`, [booking_id]);
        await pool.query(`DELETE FROM bookings WHERE booking_id = $1`, [booking_id]);

        return res.status(200).json({
          status: 1,
          message: `‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏° ${field_name} ‡πÄ‡∏ß‡∏•‡∏≤ ${start_time} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${startDateStr} ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`,
          cancelDeadline: cancelDeadline.toISOString(),
          now: now.toISOString(),
        });
      } else {
        return res.status(400).json({
          status: 0,
          message: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ ‡πÄ‡∏•‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏¢‡πÉ‡∏ô ${cancel_hours} ‡∏ä‡∏°. ‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°`,
          field: field_name,
          startDateTime: startDateTime.toISOString(),
          cancelDeadline: cancelDeadline.toISOString(),
          now: now.toISOString(),
        });
      }
    } catch (error) {
      console.error("‚ùå Error while canceling booking:", error);

      return res.status(500).json({
        status: 0,
        message: "Internal Server Error",
        error: error.message,
        booking_id,
        timestamp: new Date().toISOString(),
      });
    }
  }
);



module.exports = router;
